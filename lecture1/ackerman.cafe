open NAT .
    op ack : Nat Nat -> Nat .
    var Y : Nat .
    vars NzX NzY : NzNat .
    -- ack
    eq ack(0, Y) = Y + 1 .
    eq ack(NzX, 0) = ack(p NzX, 1) .
    eq ack(NzX, NzY) = ack(p NzX, ack(NzX, p NzY)) .
    -- test
    red ack(0, 0) .
    red ack(1, 1) .
    red ack(2, 2) .
    red ack(3, 3) .
    
    -- WARNING: This computation will cause memory overflow
    -- Explanation: 
    --     1. The recursive equation ack(NzX, NzY) = ack(p NzX, ack(NzX, p NzY))
    --        creates nested calls that grow exponentially
    --     2. Each recursive call generates multiple new Ackermann function calls
    --     3. The stack space required grows beyond available memory
    -- Therefore, computing ack(10, 10) is practically impossible
    -- red ack(10, 10) .
close
