mod! LIST1(E :: TRIV) {
    [List]
    op nil : -> List {constr} .
    op _|_ : Elt.E List -> List {constr} .

    vars L1 L2 L3 : List .
    vars E E2 : Elt.E .
    eq (nil = E | L1) = false .
    eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .
    op _@_ : List List -> List . 
    eq nil @ L2 = L2 . 
    eq (E | L1) @ L2 = E | (L1 @ L2) .  
    op rev1 : List -> List .
    eq rev1(nil) = nil .
    eq rev1(E | L1) = rev1(L1) @ (E | nil) .
    op rev2 : List -> List .
    op sr2 : List List -> List .
    eq rev2(L1) = sr2(L1,nil) .
    eq sr2(nil,L2) = L2 .
    eq sr2(E | L1,L2) = sr2(L1,E | L2) .
}

mod! LIST2(E :: TRIV) {
    [List]
    op nil : -> List {constr} .
    op _|_ : Elt.E List -> List {constr} .

    vars L1 L2 : List .
    vars E E2 : Elt.E .
    eq (nil = E | L1) = false .
    eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .
    op _@_ : List List -> List {comm} . 
    eq nil @ L2 = L2 . 
    eq (E | L1) @ L2 = E | (L1 @ L2) .  
    op rev1 : List -> List .
    eq rev1(nil) = nil .
    eq rev1(E | L1) = rev1(L1) @ (E | nil) .
    op rev2 : List -> List .
    op sr2 : List List -> List .
    eq rev2(L1) = sr2(L1,nil) .
    eq sr2(nil,L2) = L2 .
    eq sr2(E | L1,L2) = sr2(L1,E | L2) .
}

-- Theorem 1 [Associativity of _@_ (assoc@)]
-- (L1 @ L2) @ L3 = L1 @ (L2 @ L3)
-- Proof of Theorem 1 By structural induction on L1.
-- Let e be a fresh constant of Elt.E, l1,l2,l3 be fresh constants of List.
-- I. Base case
-- What to show is (nil @ l2) @ l3 = nil @ (l2 @ l3).

open LIST1 .
    -- fresh constants
    ops l2 l3 : -> List .
    -- check
    red (nil @ l2) @ l3 = nil @ (l2 @ l3) .
close

-- II. Induction case
open LIST1 .
    -- fresh constants
    ops l1 l2 l3 : -> List .
    op e : -> Elt.E .
    -- induction hypothesis
    eq (l1 @ L2) @ L3 = l1 @ (L2 @ L3) .
    -- check
    red ((e | l1) @ l2) @ l3 = (e | l1) @ (l2 @ l3) .
close

-- End of Proof of Theorem 1



-- Lemma 1 [A property of sr2 (p-sr2)]
-- sr2(L1,E2 | L2) = sr2(L1,nil) @ (E2 | L2)
-- Proof of Lemma 1 By structural induction on L1.
-- I. Base case

open LIST2 .
    -- fresh constants
    op l2 : -> List .
    op e2 : -> Elt.E .
    -- check
    red sr2(nil,e2 | l2) = sr2(nil,nil) @ (e2 | l2) .
close

-- II. Induction case
open LIST2 .
    -- fresh constants
    ops l1 l2 : -> List .
    ops e e2 : -> Elt.E .
    -- induction hypothesis
    eq sr2(l1,E2 | L2) = sr2(l1,nil) @ (E2 | L2) .
    -- check
    red sr2(e | l1,e2 | l2) = sr2(e | l1,nil) @ (e2 | l2) .
close

-- End of Proof of Lemma 1


-- Theorem 2 [Correctness of a tail recursive reverse (ctrr)]
-- rev1(L1) = rev2(L1)
-- Proof of Theorem 2 By structural induction on L1.
-- I. Base case
open LIST2 .
    -- check
    red rev1(nil) = rev2(nil) .
close

-- II. Induction case
open LIST2 .
    -- fresh constants
    op l1 : -> List .
    op e : -> Elt.E .
    -- induction hypothesis
    eq rev1(l1) = rev2(l1) .
    -- lemmas
    eq sr2(L1,E2 | L2) = sr2(L1,nil) @ (E2 | L2) .
    -- check
    red rev1(e | l1) = rev2(e | l1) .
close

-- End of Proof of Theorem 2


-- Theorem 3 [Double reverse identity (drid)]
-- rev1(rev1(L)) = L for all lists L.

-- Manual Proof of Theorem 3 by structural induction on L.
-- I. Base case: L is nil
open LIST2 .
    -- Verify that rev1(rev1(nil)) equals nil
    red rev1(rev1(nil)) = nil .
close

-- II. Inductive step: For any list l and element e
open LIST2 .
    -- Declare new constants: e is an element and l is a list
    op e : -> Elt.E .
    op l : -> List .
    -- Induction hypothesis: rev1(rev1(l)) = l
    eq rev1(rev1(l)) = l .
    -- Verify that rev1(rev1(e | l)) equals e | l using the induction hypothesis
    red rev1(rev1(e | l)) = e | l .
close

-- End of Proof of Theorem 3