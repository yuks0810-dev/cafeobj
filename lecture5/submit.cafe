
mod! PAIR(FE :: TRIV, SE :: TRIV) {
  [Pair]
  op (_,_) : Elt.FE Elt.SE -> Pair {constr} .
}
mod! TRIPLE(FE :: TRIV, SE :: TRIV, TE :: TRIV) {
    [Triple]
    op (_,_,_) : Elt.FE Elt.SE Elt.TE -> Triple {constr} .
}
mod* TRIV-ERR-IF {
    [Elt Err < Elt&Err]
    op err : -> Err .
    op if_then{_}else{_} : Bool Elt&Err Elt&Err -> Elt&Err .
}

mod! ENTRY(K :: TRIV, V :: TRIV-ERR-IF) {
    pr(PAIR(K, V) * {sort Pair -> Entry})
    [Entry ErrEntry < Entry&Err]
    op errEntry : -> ErrEntry  {constr} .
    op (_,_) : Elt.K Elt&Err.V -> Entry&Err .
    var K : Elt.K .
    eq (K, err.V) = errEntry .
}

mod* TRIV-ERR {
    [Elt Err < Elt&Err]
    op err : -> Err .
}

mod! GLIST-ERR(E :: TRIV-ERR) {
  [Nil NnList < List]
  [List ErrList < List&Err]
  op errList : -> ErrList {constr} .
  op nil : -> Nil {constr} .
  op _|_ : Elt.E List -> List {constr} .
  op _|_ : Elt&Err.E List&Err -> List&Err .
  op _@_ : List List -> List .
  op _@_ : List&Err List&Err -> List&Err .
  op if_then{_}else{_}
  : Bool List&Err List&Err -> List&Err .
  var X : Elt.E .
  var XE : Elt&Err.E .
  vars L L2 : List .
  vars LE LE2 : List&Err .
  -- _|_
  eq err.E | LE = errList .
  eq XE | errList = errList .
  -- _@_
  eq nil @ L2 = L2 .
  eq (X | L) @ L2 = X | (L @ L2) .
  eq errList @ LE = errList .
  eq LE @ errList = errList .
  -- if_then{_}else{_}
  eq if true then {LE} else {LE2} = LE .
  eq if false then {LE} else {LE2} = LE2 .
}

mod! BOOL-ERR {
  [Bool ErrBool < Bool&Err]
  op errBool : -> ErrBool {constr} .
  op if_then{_}else{_} : Bool Bool Bool -> Bool .
  vars B1 B2 : Bool .
  -- if_then{_}else{_}
  eq if true then {B1} else {B2} = B1 .
  eq if false then {B1} else {B2} = B2 .
}

mod! NAT-ERR principal-sort Nat {
  pr(NAT)
  [Nat ErrNat < Nat&Err]
  op errNat : -> ErrNat {constr} .
  op _*_ : Nat&Err Nat&Err -> Nat&Err .
  op if_then {_} else {_} : Bool Nat&Err Nat&Err -> Nat&Err .
  vars NE NE1 NE2 : Nat&Err .
  eq errNat * NE = errNat .
  eq NE * errNat = errNat .
  eq if true then {NE1} else {NE2} = NE1 .
  eq if false then {NE1} else {NE2} = NE2 .
}

mod! TABLE {
  pr(BOOL-ERR)
  pr(GLIST-ERR(E <= view from TRIV-ERR to ENTRY {
      sort Elt -> Entry,
      sort Err -> ErrEntry,
      sort Elt&Err -> Entry&Err,
      op err -> errEntry
    })
  
  * {
      sort List -> Table,
      sort Nil -> EmpTable,
      sort NnList -> NeTable,
      sort ErrList -> ErrTable,
      sort List&Err -> Table&Err,
      op errList -> errTable,
      op nil -> empTable
    }
  )

  vars K K2 : Elt.K .
  vars V V2 : Elt.V .
  vars VE VE2 : Elt&Err.V .
  var T : Table .
  var TE : Table&Err .

  op singleton : Elt.K Elt.V -> Table .
  op singleton : Elt.K Elt&Err.V -> Table&Err .
  eq singleton(K, err.V) = errTable . 
  eq singleton(K, V) = (K, V) | empTable .

  op isReg : Table Elt.K -> Bool .
  op isReg : Table&Err Elt.K -> Bool&Err .
  eq isReg(errTable, K2) = errBool .
  eq isReg(empTable, K2) = false .
  eq isReg((K,V) | T, K2) = if K == K2 then {true} else {isReg(T, K2)} .

  op lookup : Table Elt.K -> Elt&Err.V .
  op lookup : Table&Err Elt.K -> Elt&Err.V .
  eq lookup(errTable, K2) = err.V .
  eq lookup(empTable, K2) = err.V .
  eq lookup((K, V) | T, K2) = if K == K2 then {V} else {lookup(T, K2)} .

  op update : Table Elt.K Elt.V -> Table .
  op update : Table&Err Elt.K Elt&Err.V -> Table&Err .
  eq update(errTable, K2, VE) = errTable .
  eq update(TE, K2, err.V) = errTable .
  eq update(empTable, K2, V2) = (K2, V2) | empTable .
  eq update((K, V) | T, K2, V2) = if K == K2 then {(K, V2) | T} else {(K, V) | update(T, K2, V2)} .

  op insert : Table Elt.K Elt.V -> Table&Err . 
  op insert : Table&Err Elt.K Elt&Err.V -> Table&Err .
  eq insert(errTable,K2,VE) = errTable .
  eq insert(TE,K2,err.V) = errTable .
  eq insert(T,K2,V2) = if isReg(T,K2) then {errTable} else {(K2, V2) | T } .

  op remove : Table Elt.K -> Table .
  op remove : Table&Err Elt.K -> Table&Err .
  eq remove(errTable, K2) = errTable .
  eq remove(empTable, K2) = empTable .
  eq remove((K, V) | T, K2) = if K == K2 then {T} else {(K, V) | remove(T, K2)} .

  op delete : Table Elt.K -> Table&Err .
  op delete : Table&Err Elt.K -> Table&Err .
  eq delete(errTable, K2) = errTable .
  eq delete(T, K2) = if isReg(T, K2) == true then {remove(T, K2)} else {errTable} .
  eq delete(errTable, K2) = errTable .
}

mod! STRING-ERR principal-sort String {
    pr(STRING)
    [String ErrString < String&Err]
    op errStr : -> ErrString {constr} .
    op if_then {_} else {_} : Bool String&Err String&Err -> String&Err .
    vars SE1 SE2 : String&Err .
    eq if true then {SE1} else {SE2} = SE1 .
    eq if false then {SE1} else {SE2} = SE2 .
}

view TRIV2QID from TRIV to QID {
    sort Elt -> Qid
}

view TRIV-ERR-IF2STRING-ERR from TRIV-ERR-IF to STRING-ERR {
    sort Elt -> String,
    sort Err -> ErrString,
    sort Elt&Err -> String&Err,
    op err -> errStr,
    op (if_then{_}else{_}) -> (if_then{_}else{_}),
}

open TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) .
  op t : -> Table .
  eq t = update(update(singleton('java, "Java"),'obj, "OBJ3"),'c, "C") .
  red t .
  red isReg(t, 'obj) .
  red isReg(t, 'mk) .
  red lookup(t, 'obj) .
  red lookup(t, 'mk) .
  red update(t, 'mk, "SML#") .
  red update(t, 'obj, "CafeOBJ") .
  red insert(t, 'mk, "SML#") .
  red insert(t, 'obj, "CafeOBJ") .
  red remove(t, 'mk) .
  red remove(t, 'obj) .
  red delete(t, 'mk) .
  red delete(t, 'obj) .
close

mod! TAG {
  pr(PAIR(STRING-ERR,NAT-ERR) * {sort Pair -> Tag} )
  [Tag ErrTag < Tag&Err]
  op errTag : -> ErrTag {constr} .
  op (_,_) : String&Err Nat&Err -> Tag&Err .
  op if_then{_}else{_} : Bool Tag&Err Tag&Err -> Tag&Err .
  var SE : String&Err .
  var NE : Nat&Err .
  vars TE1 TE2 : Tag&Err .
  -- (_,_)
  eq (errStr,NE) = errTag .
  eq (SE,errNat) = errTag .
  -- if_then{_}else{_}
  eq if true then {TE1} else {TE2} = TE1 .
  eq if false then {TE1} else {TE2} = TE2 .
}

view TRIV-ERR-IF2TAG from TRIV-ERR-IF to TAG {
  sort Elt -> Tag,
  sort Err -> ErrTag,
  sort Elt&Err -> Tag&Err,
  op err -> errTag,
  op (if_then{_}else{_}) -> (if_then{_}else{_})
}

mod! CATALOG {
    pr(TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2TAG) * {
        sort Table -> Catalog,
        sort EmpTable -> EmpCatalog,
        sort NeTable -> NeCatalog,
        sort ErrTable -> ErrCatalog,
        sort Table&Err -> Catalog&Err,
        op empTable -> empCatalog,
        op errTable -> errCatalog
      })
}

mod! CATALOG {
  pr(TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2TAG) * {
    sort Table -> Catalog, 
    sort EmpTable -> EmpCatalog,
    sort NeTable -> NeCatalog, 
    sort ErrTable -> ErrCatalog,
    sort Table&Err -> Catalog&Err, 
    op empTable -> empCatalog,
    op errTable -> errCatalog 
  }
  )
}

mod! CART-ITEM {
  pr(PAIR(QID,NAT-ERR) * {sort Pair -> CItem})
  [CItem ErrCItem < CItem&Err]
  op errCItem : -> ErrCItem {constr} .
}

view TRIV-ERR2CART-ITEM from TRIV-ERR to CART-ITEM {
    sort Elt -> CItem,
    sort Err -> ErrCItem,
    sort Elt&Err -> CItem&Err,
    op err -> errCItem,
}

mod! CART { pr(GLIST-ERR(E <= TRIV-ERR2CART-ITEM) * {
    sort List -> Cart, 
    sort Nil -> EmpCart,
    sort NnList -> NeCart, 
    sort ErrList -> ErrCart,
    sort List&Err -> Cart&Err, 
    op nil -> empCart,
    op errList -> errCart 
  })
  op norm : Cart -> Cart .
  op mkCart : Cart CItem -> Cart .
  vars I I2 : Qid . vars N N2 : Nat . var C : Cart .
  -- norm
  eq norm(empCart) = empCart .
  eq norm((I,N) | C) = mkCart(norm(C),(I,N)) .
  -- mkCart
  eq mkCart(empCart,(I,N)) = (I,N) | empCart .
  eq mkCart((I2,N2) | C,(I,N)) = if I == I2 then {(I,N + N2) | C} else {(I2,N2) | mkCart(C,(I,N))} .
}

open CART .
  op c : -> Cart .
  eq c = ('o,4) | ('t,10) | ('o,6) | empCart .
  red norm(c) .
close

mod! BILL-ITEM { pr(TRIPLE(STRING-ERR,NAT-ERR,NAT-ERR) * {sort Triple -> BItem})
  [BItem ErrBItem < BItem&Err]
  op errBItem : -> ErrBItem {constr} .
  op (_,_,_) : String&Err Nat&Err Nat&Err -> BItem&Err .
  var SE : String&Err . vars NE1 NE2 : Nat&Err .
  eq (errStr,NE1,NE2) = errBItem .
  eq (SE,errNat,NE2) = errBItem .
  eq (SE,NE1,errNat) = errBItem .
}

view TRIV-ERR2BILL-ITEM from TRIV-ERR to BILL-ITEM {
  sort Elt -> BItem,
  sort Err -> ErrBItem,
  sort Elt&Err -> BItem&Err,
  op err -> errBItem 
}

mod! BILL-ITEM { pr(TRIPLE(STRING-ERR,NAT-ERR,NAT-ERR) * {sort Triple -> BItem})
  [BItem ErrBItem < BItem&Err]
  op errBItem : -> ErrBItem {constr} .
  op (_,_,_) : String&Err Nat&Err Nat&Err -> BItem&Err .
  var SE : String&Err . vars NE1 NE2 : Nat&Err .
  eq (errStr,NE1,NE2) = errBItem .
  eq (SE,errNat,NE2) = errBItem .
  eq (SE,NE1,errNat) = errBItem .
}

view TRIV-ERR2BILL-ITEM from TRIV-ERR to BILL-ITEM {
  sort Elt -> BItem,
  sort Err -> ErrBItem,
  sort Elt&Err -> BItem&Err,
  op err -> errBItem 
}

mod! BILIST principal-sort BIList {
  pr(GLIST-ERR(E <= TRIV-ERR2BILL-ITEM) * {
  sort List -> BIList, sort Nil -> NilBIList, sort NnList -> NnBIList,
  sort ErrList -> ErrBIList, sort List&Err -> BIList&Err,
  op nil -> nilBIL, op errList -> errBIL, } )
  op total : BIList -> Nat .
  op total : BIList&Err -> Nat&Err .
  var S : String . vars N ST : Nat . var BIL : BIList .
  eq total(errBIL) = errNat .
  eq total(nilBIL) = 0 .
  eq total((S,N,ST) | BIL) = ST + total(BIL) .
}

mod! BILL { pr(CATALOG) pr(CART)
  pr(PAIR(BILIST,NAT-ERR) * {sort Pair -> Bill})
  [Bill ErrBill < Bill&Err]
  op errBill : -> ErrBill {constr} .
  op (_,_) : BIList&Err Nat&Err -> Bill&Err .
  op mkBill : Catalog Cart -> Bill&Err .
  op mkSubBill : BIList&Err -> Bill&Err .
  op mkBIL : Catalog Cart -> BIList&Err .
  op mkSubBIL : Tag&Err Catalog Cart Nat -> BIList&Err .
  var BILE : BIList&Err . var BIL : BIList . var NE : Nat&Err .
  var CAT : Catalog . var I : Qid . vars N P : Nat .
  var IN : String . var C : Cart .
  -- (_,_)
  eq (errBIL,NE) = errBill .
  eq (BILE,errNat) = errBill .
  -- mkBill
  eq mkBill(CAT,C) = mkSubBill(mkBIL(CAT,norm(C))) .
  -- mkSubBill
  eq mkSubBill(errBIL) = errBill .
  eq mkSubBill(BIL) = (BIL,total(BIL)) .
  -- mkBIL
  eq mkBIL(CAT,empCart) = nilBIL .
  eq mkBIL(CAT,(I,N) | C) = mkSubBIL(lookup(CAT,I),CAT,C,N) .
  -- mkSubBIL
  eq mkSubBIL(errTag,CAT,C,N) = errBIL .
  eq mkSubBIL((IN,P),CAT,C,N) = (IN,N,N * P) | mkBIL(CAT,C) .
}

open BILL .
  op cat : -> Catalog .
  eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) | empCatalog .
  op c : -> Cart .
  eq c = ('o,4) | ('t,10) | ('o,6) | empCart .
  red mkBill(cat,c) .
close

open BILL .
  op cat : -> Catalog .
  ops c1 c2 : -> Cart .
  eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) |
  ('b,("banana",140)) | ('p,("potato",30)) | empCatalog .
  eq c1 = ('p,3) | ('o,2) | ('a,3) | ('p,10) | ('b,10) | ('o,10) | ('t,20) | empCart .
  eq c2 = ('p,3) | ('o,2) | ('f,10) | ('a,3) | empCart .
  red mkBill(cat,c1) .
  red mkBill(cat,c2) .
close