-- GCD (Greatest Common Divisor)
mod! GCD {
    -- imports
    pr(NAT)
    
    -- signature
    op gcd : Nat Zero -> Nat .
    op gcd : Nat NzNat -> NzNat .
    op gcd : Nat Nat -> Nat .
    
    -- CafeOBJ vars
    var X : Nat .
    var NzY : NzNat .
    
    -- equations
    eq gcd(X,0) = X .
    eq gcd(X, NzY) = gcd(NzY, X rem NzY) .
}

open GCD .
    red gcd(24, 36) . -- compute the gcd of 24 & 36
    red gcd(2015, 31031) . -- compute the gcd of 2015 & 31031
close

-- Module to calculate LCM (Least Common Multiple)
mod! LCM {
    pr(GCD)
    op lcm : Nat Zero -> Nat .
    op lcm : Nat NzNat -> Nat .
    op lcm : Nat Nat -> Nat .

    var X : Nat .
    var NzY : NzNat .

    eq lcm(X,0) = 0 .

    -- quo is an operator for integer division (quotient). X quo Y returns the quotient of X divided by Y. For example, 10 quo 3 is 3.
    eq lcm(X, NzY) = (X quo gcd(X, NzY)) * NzY .
}

open LCM .
    red lcm(24, 36) .
    red lcm(2015, 31031) .
close

-- Error or Exception Handling
mod! NAT-ERR {
    pr(NAT)
    [Nat ErrNat < Nat&Err] .
    op errNat : -> ErrNat {constr} . -- constructor for ErrNat
    op p_ : Zero -> ErrNat .
    op p_ : ErrNat -> ErrNat .
    op p_ : Nat&Err -> Nat&Err .
    op _quo_ : Nat&Err Zero -> ErrNat .
    op _quo_ : Nat&Err ErrNat -> ErrNat .
    op _quo_ : ErrNat Nat&Err -> ErrNat .
    op _quo_ : Nat&Err Nat&Err -> Nat&Err .

    var NE : Nat&Err .
    eq p 0 = errNat .
    eq p errNat = errNat .
    eq NE quo 0 = errNat .
    eq NE quo errNat = errNat .
    eq errNat quo NE = errNat .
}

open NAT-ERR .
    red p 1 .
    red p 0 .
    red p errNat .
    red 10 quo 3 .
    red 10 quo 0 .
    red 10 quo errNat .
    red errNat quo 3 .
    red errNat quo errNat .
close

-- List of Natural Numbers
mod! NATLIST {
    pr(NAT-ERR)
    [NatList]
    [Nil NnNatList < NatList]

    op nil : -> Nil {constr} .
    op _|_ : Nat NatList -> NnNatList {constr} .
    op hd : Nil -> ErrNat .
    op hd : NnNatList -> Nat .
    op hd : NatList -> Nat&Err .
    op tl : NatList -> NatList .
    op _@_ : NatList NatList -> NatList .
    op [_.._] : Nat Nat -> NatList . -- Range operator
    op if_then {_} else {_} : Bool NatList NatList -> NatList .
    
    vars X Y : Nat .
    vars L L2 : NatList .

    eq hd(nil) = errNat .
    eq hd(X | L) = X .
    eq tl(nil) = nil .
    eq tl(X | L) = L .
    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    eq [X .. Y] = if X > Y then {nil} else {X | [X + 1 .. Y]} .
    eq if true then {L} else {L2} = L .
    eq if false then {L} else {L2} = L2 .
}

open NATLIST .
    red hd(tl(nil)) .
    red hd(tl(0 | nil)) .
    red hd(tl(1 | 0 | nil)) .
    red hd(tl(3 | 2 | 1 | 0 | nil)) .
close

-- Quick Sort
mod! QSORT {
    pr(NATLIST)
    
    op qsort : NatList -> NatList .
    op partition : Nat NatList NatList NatList -> NatList .
    
    -- cafeObj vars
    vars X Y : Nat .
    vars L LL RL : NatList .
    
    -- Quick sort implementation
    eq qsort(nil) = nil .
    eq qsort(X | nil) = X | nil .
    eq qsort(X | Y | L) = partition(X, Y | L, nil, nil) .

    -- Partition implementation
    eq partition(X, nil, LL, RL) = qsort(LL) @ (X | qsort(RL)) .
    eq partition(X, Y | L, LL, RL) = if Y < X then {partition(X, L, Y | LL, RL)} else {partition(X, L, LL, Y | RL)} .
}

open QSORT .
    red qsort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) .
close

-- Sieve of Eratosthenes
mod! ERATOSTHENES-SIEVE {
    -- imports
    pr(NATLIST)
    -- signature
    op primesUpto : Nat -> NatList .
    op sieve : NatList -> NatList .
    op check : Nat NatList -> NatList .
    -- CafeOBJ vars
    vars X Y : Nat .
    var NzX : NzNat .
    var L : NatList .
    -- equations
    -- primesUpto implementation
    eq primesUpto(X) = sieve([2 .. X]) .
    -- sieve implementation
    eq sieve(nil) = nil .
    eq sieve(X | L) = X | sieve(check(X, L)) .
    -- check implementation
    eq check(0, L) = L .
    eq check(NzX, nil) = nil .
    eq check(NzX, Y | L) = if NzX divides Y then {check(NzX, L)} else {Y | check(NzX, L)} .
}

open ERATOSTHENES-SIEVE .
    red primesUpto(10) .
    red primesUpto(20) .
    red primesUpto(50) .
    red primesUpto(100) .
close

mod! MERGE-SORT {
    pr(NATLIST)
    pr(NAT-ERR)
    
    [Pair]
    op <_,_> : NatList NatList -> Pair {constr}
    op fst : Pair -> NatList .
    op snd : Pair -> NatList .
    
    op mergeSort : NatList -> NatList .
    op merge : NatList NatList -> NatList .
    op split : NatList -> Pair .
    op check : Bool NatList -> NatList .
    
    -- Variable declarations
    vars X Y : Nat .
    vars L L1 L2 : NatList .
    var P : Pair .
    
    -- Extract elements from Pair
    -- ####################################################################################
    -- this is the operator that extracts the first and second elements of a pair.
    -- Using this operator, we can split a list into two lists. This is used to recursively sort the two halves of the list.
    -- * fst extracts the first element of a pair.
    -- * snd extracts the second element of a pair.
    -- ####################################################################################
    eq fst(< L1, L2 >) = L1 .
    eq snd(< L1, L2 >) = L2 .
    
    -- Merge Sort implementation
    -- ####################################################################################
    -- this is the operator that recursively sorts the two halves of the list and merges them.
    -- ####################################################################################
    eq mergeSort(nil) = nil . -- if the list is empty, return an empty list
    eq mergeSort(X | nil) = X | nil . -- if the list has only one element, return the element
    eq mergeSort(X | Y | L) = merge(mergeSort(fst(split(L))), mergeSort(snd(split(L)))) . -- recursively sort the two halves of the list and merge them
    
    -- Split list
    eq split(L) = < check(true, L), check(false, L) > . -- split the list into two lists, one with elements that are true and one with elements that are false
    
    -- Check function for splitting
    -- ####################################################################################
    -- check(true, nil) and check(false, nil) are both needed
    -- because check function might return an empty list for both true and false.
    -- Therefore, it is needed to cover those two cases to ensure that the function works correctly.
    -- ####################################################################################
    eq check(true, nil) = nil . -- if the list is empty, return an empty list
    eq check(false, nil) = nil . -- if the list is empty, return an empty list      
    eq check(true, X | nil) = X | nil . -- if the list has only one element, return the element
    eq check(false, X | nil) = nil . -- if the list has only one element, return an empty list
    eq check(true, X | Y | L) = X | check(true, L) . -- if the list has more than one element, return the first element and recursively check the rest of the list
    eq check(false, X | Y | L) = Y | check(false, L) . -- if the list has more than one element, return the second element and recursively check the rest of the list
    
    -- Merge operation
    -- `then X | merge(L1, Y | L2)` : if the first element of the first list is less than or equal to the first element of the second list, return the first element and recursively merge the rest of the first list and the second list
    -- `else Y | merge(X | L1, L2)` : if the first element of the first list is greater than the first element of the second list, return the second element and recursively merge the first list and the rest of the second list   
    eq merge(L, nil) = L . -- if the first list is empty, return the second list
    eq merge(nil, L) = L . -- if the second list is empty, return the first list
    eq merge(X | L1, Y | L2) = 
        if X <= Y 
        then X | merge(L1, Y | L2) 
        else Y | merge(X | L1, L2) 
        fi .
}

open MERGE-SORT .
    red mergeSort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) . -- Case: Normal case
    red mergeSort(9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | nil) . -- Case: Reverse sorted list
    red mergeSort(4 | 2 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) . -- Case: There is a pair of same numbner (2)
    red mergeSort(5 | 5 | 5 | 5 | 5 | nil) . -- Case: All elements are the same
    red mergeSort(0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | nil) . -- Case: Already sorted list
    red mergeSort(1000000 | 200 | 500000 | 1 | 0 | 999999 | nil) . -- Case: Large numbers
    red mergeSort(3 | 1 | 4 | 1 | 5 | 9 | nil) . -- Case: Odd number of elements
    red mergeSort(8 | 6 | 7 | 5 | 3 | 0 | 9 | 2 | nil) . -- Case: Even number of elements
    red mergeSort(nil) . -- Case: Empty list
close
